

from pyexpat.errors import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required

from objectif.utils import _get_mongo_user
from .models import Objective
from .forms import ObjectiveForm  # tu dois cr√©er un formulaire Django pour Objective
import google.generativeai as genai
from django.http import HttpResponse, JsonResponse

import qrcode
import io
import json
import datetime

from django.utils import timezone
from bson import ObjectId
import os
import requests


genai.configure(api_key="AIzaSyBCutcN7kxoQ8frc9GHPGXlBMneulZCHzc")

@login_required
def list_objectif(request):
    # üîπ Filtrer par user connect√©
    objectifs = Objective.objects(user_id=str(request.user.id))
    return render(request, "objectif/list.html", {"objectifs": objectifs})

@login_required
def create_objectif(request):
    if request.method == "POST":
        form = ObjectiveForm(request.POST)
        if form.is_valid():
            obj = Objective(
                user_id=str(request.user.id),
                **form.cleaned_data
            )
            obj.save()
            return redirect("objectif:list")
    else:
        form = ObjectiveForm()
    return render(request, "objectif/form.html", {"form": form, "title": "Cr√©er un objectif"})

@login_required
def update_objectif(request, id):
    objectif = Objective.objects.get(id=id, user_id=str(request.user.id))
    if request.method == "POST":
        form = ObjectiveForm(request.POST)
        if form.is_valid():
            for key, value in form.cleaned_data.items():
                setattr(objectif, key, value)
            objectif.derniere_mise_a_jour = date = datetime.datetime.utcnow()  # ‚úÖ correct

            objectif.save()
            return redirect("objectif:list")
    else:
        initial = {
            "titre": objectif.titre,
            "description": objectif.description,
            "filiere": objectif.filiere,
            "niveau": objectif.niveau,
            "priorite": objectif.priorite,
            "etat": objectif.etat,
            "date_debut": objectif.date_debut,
            "date_echeance": objectif.date_echeance,
        }
        form = ObjectiveForm(initial=initial)
    return render(request, "objectif/form.html", {"form": form, "title": "Modifier un objectif"})

@login_required
def delete_objectif(request, id):
    objectif = Objective.objects.get(id=id, user_id=str(request.user.id))
    if request.method == "POST":
        objectif.delete()
        return redirect("objectif:list")
    return render(request, "objectif/confirm_delete.html", {"objectif": objectif})




@login_required
def objective_details(request, obj_id):
    """Page de d√©tails d'un objectif avec QR Code et Calendrier"""
    try:
        obj = Objective.objects.get(id=obj_id)

        # Pr√©parer les donn√©es pour l'affichage
        details = {
            'titre': getattr(obj, 'titre', 'Sans titre'),
            'description': getattr(obj, 'description', 'Aucune description'),
            'filiere': getattr(obj, 'filiere', 'Non sp√©cifi√©e'),
            'niveau': getattr(obj, 'niveau', 'Non sp√©cifi√©'),
            'priorite': getattr(obj, 'priorite', 'Non sp√©cifi√©'),
            'etat': getattr(obj, 'etat', 'Non sp√©cifi√©'),
            'progression': getattr(obj, 'progression', 0),
            'date_creation': getattr(obj, 'date_creation', 'Non sp√©cifi√©e'),
            'date_debut': getattr(obj, 'date_debut', 'Non sp√©cifi√©e'),
            'date_echeance': getattr(obj, 'date_echeance', 'Non sp√©cifi√©e'),
            'derniere_mise_a_jour': getattr(obj, 'derniere_mise_a_jour', 'Non sp√©cifi√©e'),
            'nb_sessions': getattr(obj, 'nb_sessions', 0),
            'temps_total': getattr(obj, 'temps_total', 0),
            'taches': getattr(obj, 'taches', []),
            'ressources': getattr(obj, 'ressources', []),
            'tags': getattr(obj, 'tags', []),
            'suggestion_ia': getattr(obj, 'suggestion_ia', 'Aucune suggestion'),
            'score_priorite_ia': getattr(obj, 'score_priorite_ia', 0),
            'objectif_recommande': getattr(obj, 'objectif_recommande', False)
        }

        # Formater les dates
        for date_field in ['date_creation', 'date_debut', 'date_echeance', 'derniere_mise_a_jour']:
            if hasattr(obj, date_field) and getattr(obj, date_field):
                date_value = getattr(obj, date_field)
                if hasattr(date_value, 'strftime'):
                    details[date_field] = date_value.strftime("%d/%m/%Y %H:%M")

        # Donn√©es pour le calendrier
        calendar_data = generate_calendar_data(obj)

        context = {
            'objectif': obj,
            'details': details,
            'calendar_data': calendar_data,
            'today': timezone.now().date()
        }

        return render(request, 'objectif/details.html', context)

    except Objective.DoesNotExist:
        return HttpResponse("Objectif non trouv√©", status=404)

def generate_calendar_data(obj):
    """G√©n√©rer les donn√©es pour le calendrier avec gestion robuste des dates"""
    calendar_data = {
        'events': [],
        'timeline': [],
        'deadline_alert': None
    }

    # Date d'√©ch√©ance
    if hasattr(obj, 'date_echeance') and obj.date_echeance:
        try:
            deadline = obj.date_echeance
            # Convertir en date si c'est un datetime
            if hasattr(deadline, 'date'):
                deadline_date = deadline.date()
            else:
                deadline_date = deadline

            calendar_data['events'].append({
                'date': deadline_date.isoformat(),
                'title': '√âch√©ance',
                'type': 'deadline',
                'description': f'√âch√©ance: {obj.titre}'
            })

            # Alerte si √©ch√©ance proche
            today = timezone.now().date()
            days_until_deadline = (deadline_date - today).days
            if days_until_deadline <= 7:
                calendar_data['deadline_alert'] = {
                    'days_left': days_until_deadline,
                    'is_urgent': days_until_deadline <= 3
                }
        except (TypeError, AttributeError) as e:
            print(f"Erreur traitement date √©ch√©ance: {e}")

    # Date de d√©but
    if hasattr(obj, 'date_debut') and obj.date_debut:
        try:
            start_date = obj.date_debut
            # Convertir en date si c'est un datetime
            if hasattr(start_date, 'date'):
                start_date_date = start_date.date()
            else:
                start_date_date = start_date

            calendar_data['events'].append({
                'date': start_date_date.isoformat(),
                'title': 'D√©but',
                'type': 'start',
                'description': f'D√©but: {obj.titre}'
            })
        except (TypeError, AttributeError) as e:
            print(f"Erreur traitement date d√©but: {e}")

    # G√©n√©rer une timeline bas√©e sur la progression
    progression = getattr(obj, 'progression', 0)
    if progression > 0:
        calendar_data['timeline'].append({
            'date': timezone.now().date().isoformat(),
            'progress': progression,
            'description': f'Progression: {progression}%'
        })

    return calendar_data

@login_required
def objective_calendar(request):
    """Vue calendrier pour tous les objectifs"""
    all_objectifs = list(Objective.objects.all())

    calendar_events = []
    for obj in all_objectifs:
        # √âch√©ance
        if hasattr(obj, 'date_echeance') and obj.date_echeance:
            deadline = obj.date_echeance
            if timezone.is_aware(deadline):
                deadline = deadline.date()

            calendar_events.append({
                'id': str(obj.id),
                'title': f'üìÖ {obj.titre}',
                'start': deadline.isoformat(),
                'end': deadline.isoformat(),
                'color': '#ff4444',
                'type': 'deadline',
                'url': f'/objectives/details/{obj.id}/'
            })

        # Date de d√©but
        if hasattr(obj, 'date_debut') and obj.date_debut:
            start_date = obj.date_debut
            if timezone.is_aware(start_date):
                start_date = start_date.date()

            calendar_events.append({
                'id': str(obj.id) + '_start',
                'title': f'üöÄ D√©but: {obj.titre}',
                'start': start_date.isoformat(),
                'end': start_date.isoformat(),
                'color': '#00aa00',
                'type': 'start',
                'url': f'/objectives/details/{obj.id}/'
            })

    context = {
        'calendar_events': json.dumps(calendar_events),
        'objectifs_count': len(all_objectifs)
    }

    return render(request, 'objectif/calendar.html', context)

@login_required
def calendar_events_api(request):
    """API pour les √©v√©nements du calendrier"""
    all_objectifs = list(Objective.objects.all())

    events = []
    for obj in all_objectifs:
        # √âch√©ance
        if hasattr(obj, 'date_echeance') and obj.date_echeance:
            deadline = obj.date_echeance
            if timezone.is_aware(deadline):
                deadline = deadline.date()

            events.append({
                'id': str(obj.id),
                'title': f'√âch√©ance: {obj.titre}',
                'start': deadline.isoformat(),
                'end': deadline.isoformat(),
                'color': '#dc3545',
                'textColor': 'white',
                'url': f'/objectives/details/{obj.id}/'
            })

        # Date de d√©but
        if hasattr(obj, 'date_debut') and obj.date_debut:
            start_date = obj.date_debut
            if timezone.is_aware(start_date):
                start_date = start_date.date()

            events.append({
                'id': str(obj.id) + '_start',
                'title': f'D√©but: {obj.titre}',
                'start': start_date.isoformat(),
                'end': start_date.isoformat(),
                'color': '#28a745',
                'textColor': 'white',
                'url': f'/objectives/details/{obj.id}/'
            })

    return JsonResponse(events, safe=False)


@login_required
def generate_qrcode(request, obj_id):
    """G√©n√©rer un QR Code pour un objectif"""
    try:
        obj = Objective.objects.get(id=obj_id)

        # URL de d√©tail de l'objectif
        detail_url = request.build_absolute_uri(f'/objectives/details/{obj_id}/')

        # Cr√©er le QR Code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(detail_url)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")

        # Sauvegarder dans un buffer
        buffer = io.BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)

        return HttpResponse(buffer.getvalue(), content_type='image/png')

    except Objective.DoesNotExist:
        return HttpResponse("Objectif non trouv√©", status=404)

@login_required
def objective_details(request, obj_id):
    """Page de d√©tails d'un objectif avec analyse IA"""
    try:
        obj = Objective.objects.get(id=obj_id, user_id=str(request.user.id))

        # Pr√©parer les donn√©es pour l'affichage
        details = {
            'titre': getattr(obj, 'titre', 'Sans titre'),
            'description': getattr(obj, 'description', 'Aucune description'),
            'filiere': getattr(obj, 'filiere', 'Non sp√©cifi√©e'),
            'niveau': getattr(obj, 'niveau', 'Non sp√©cifi√©'),
            'priorite': getattr(obj, 'priorite', 'Non sp√©cifi√©'),
            'etat': getattr(obj, 'etat', 'Non sp√©cifi√©'),
            'progression': getattr(obj, 'progression', 0),
            'date_creation': getattr(obj, 'date_creation', 'Non sp√©cifi√©e'),
            'date_debut': getattr(obj, 'date_debut', 'Non sp√©cifi√©e'),
            'date_echeance': getattr(obj, 'date_echeance', 'Non sp√©cifi√©e'),
            'derniere_mise_a_jour': getattr(obj, 'derniere_mise_a_jour', 'Non sp√©cifi√©e'),
            'nb_sessions': getattr(obj, 'nb_sessions', 0),
            'temps_total': getattr(obj, 'temps_total', 0),
            'taches': getattr(obj, 'taches', []),
            'ressources': getattr(obj, 'ressources', []),
            'tags': getattr(obj, 'tags', []),
            'suggestion_ia': getattr(obj, 'suggestion_ia', 'Aucune suggestion'),
            'score_priorite_ia': getattr(obj, 'score_priorite_ia', 0),
            'objectif_recommande': getattr(obj, 'objectif_recommande', False),
            # Nouveaux champs d'analyse IA
            'analyse_ia': getattr(obj, 'analyse_ia', ''),
            'points_forts': getattr(obj, 'points_forts', []),
            'points_amelioration': getattr(obj, 'points_amelioration', []),
            'risques': getattr(obj, 'risques', []),
            'recommendations': getattr(obj, 'recommendations', []),
            'delai_realisme': getattr(obj, 'delai_realisme', ''),
            'niveau_difficulte': getattr(obj, 'niveau_difficulte', 'moyen')
        }

        # Formater les dates
        for date_field in ['date_creation', 'date_debut', 'date_echeance', 'derniere_mise_a_jour']:
            if hasattr(obj, date_field) and getattr(obj, date_field):
                date_value = getattr(obj, date_field)
                if hasattr(date_value, 'strftime'):
                    details[date_field] = date_value.strftime("%d/%m/%Y %H:%M")

        # Donn√©es pour le calendrier
        calendar_data = generate_calendar_data(obj)

        context = {
            'objectif': obj,
            'details': details,
            'calendar_data': calendar_data,
            'today': timezone.now().date(),
            'has_ia_analysis': bool(getattr(obj, 'analyse_ia', ''))
        }

        return render(request, 'objectif/details.html', context)

    except Objective.DoesNotExist:
        return HttpResponse("Objectif non trouv√©", status=404)
def generate_calendar_data(obj):
    """G√©n√©rer les donn√©es pour le calendrier avec gestion robuste des dates"""
    calendar_data = {
        'events': [],
        'timeline': [],
        'deadline_alert': None
    }

    # Date d'√©ch√©ance
    if hasattr(obj, 'date_echeance') and obj.date_echeance:
        try:
            deadline = obj.date_echeance
            # Convertir en date si c'est un datetime
            if isinstance(deadline, datetime.datetime):
                deadline_date = deadline.date()
            elif hasattr(deadline, 'date'):
                deadline_date = deadline.date()
            else:
                deadline_date = deadline

            calendar_data['events'].append({
                'date': deadline_date.isoformat(),
                'title': '√âch√©ance',
                'type': 'deadline',
                'description': f'√âch√©ance: {obj.titre}'
            })

            # Alerte si √©ch√©ance proche
            today = timezone.now().date()
            # S'assurer que les deux sont des date objects
            if isinstance(deadline_date, datetime.date) and not isinstance(deadline_date, datetime.datetime):
                days_until_deadline = (deadline_date - today).days
                if days_until_deadline <= 7:
                    calendar_data['deadline_alert'] = {
                        'days_left': days_until_deadline,
                        'is_urgent': days_until_deadline <= 3
                    }

        except (TypeError, AttributeError) as e:
            print(f"Erreur traitement date √©ch√©ance: {e}")
            print(f"Type deadline: {type(deadline)}, valeur: {deadline}")

    # Date de d√©but
    if hasattr(obj, 'date_debut') and obj.date_debut:
        try:
            start_date = obj.date_debut
            # Convertir en date si c'est un datetime
            if isinstance(start_date, datetime.datetime):
                start_date_date = start_date.date()
            elif hasattr(start_date, 'date'):
                start_date_date = start_date.date()
            else:
                start_date_date = start_date

            calendar_data['events'].append({
                'date': start_date_date.isoformat(),
                'title': 'D√©but',
                'type': 'start',
                'description': f'D√©but: {obj.titre}'
            })
        except (TypeError, AttributeError) as e:
            print(f"Erreur traitement date d√©but: {e}")
            print(f"Type start_date: {type(start_date)}, valeur: {start_date}")

    # G√©n√©rer une timeline bas√©e sur la progression
    progression = getattr(obj, 'progression', 0)
    if progression > 0:
        calendar_data['timeline'].append({
            'date': timezone.now().date().isoformat(),
            'progress': progression,
            'description': f'Progression: {progression}%'
        })

    return calendar_data

@login_required
def objective_calendar(request):
    """Vue calendrier pour tous les objectifs"""
    all_objectifs = list(Objective.objects.all())

    calendar_events = []
    for obj in all_objectifs:
        # √âch√©ance
        if hasattr(obj, 'date_echeance') and obj.date_echeance:
            deadline = obj.date_echeance
            if timezone.is_aware(deadline):
                deadline = deadline.date()

            calendar_events.append({
                'id': str(obj.id),
                'title': f'üìÖ {obj.titre}',
                'start': deadline.isoformat(),
                'end': deadline.isoformat(),
                'color': '#ff4444',
                'type': 'deadline',
                'url': f'/objectives/details/{obj.id}/'
            })

        # Date de d√©but
        if hasattr(obj, 'date_debut') and obj.date_debut:
            start_date = obj.date_debut
            if timezone.is_aware(start_date):
                start_date = start_date.date()

            calendar_events.append({
                'id': str(obj.id) + '_start',
                'title': f'üöÄ D√©but: {obj.titre}',
                'start': start_date.isoformat(),
                'end': start_date.isoformat(),
                'color': '#00aa00',
                'type': 'start',
                'url': f'/objectives/details/{obj.id}/'
            })

    context = {
        'calendar_events': json.dumps(calendar_events),
        'objectifs_count': len(all_objectifs)
    }

    return render(request, 'objectif/calendar.html', context)

@login_required
def calendar_events_api(request):
    """API pour les √©v√©nements du calendrier"""
    all_objectifs = list(Objective.objects.all())

    events = []
    for obj in all_objectifs:
        # √âch√©ance
        if hasattr(obj, 'date_echeance') and obj.date_echeance:
            deadline = obj.date_echeance
            if timezone.is_aware(deadline):
                deadline = deadline.date()

            events.append({
                'id': str(obj.id),
                'title': f'√âch√©ance: {obj.titre}',
                'start': deadline.isoformat(),
                'end': deadline.isoformat(),
                'color': '#dc3545',
                'textColor': 'white',
                'url': f'/objectives/details/{obj.id}/'
            })

        # Date de d√©but
        if hasattr(obj, 'date_debut') and obj.date_debut:
            start_date = obj.date_debut
            if timezone.is_aware(start_date):
                start_date = start_date.date()

            events.append({
                'id': str(obj.id) + '_start',
                'title': f'D√©but: {obj.titre}',
                'start': start_date.isoformat(),
                'end': start_date.isoformat(),
                'color': '#28a745',
                'textColor': 'white',
                'url': f'/objectives/details/{obj.id}/'
            })

    return JsonResponse(events, safe=False)

@login_required
def objective_json(request, obj_id):
    """API JSON des d√©tails d'un objectif"""
    try:
        obj = Objective.objects.get(id=obj_id)

        # S√©rialiser l'objectif
        data = {
            'id': str(obj.id),
            'titre': getattr(obj, 'titre', ''),
            'description': getattr(obj, 'description', ''),
            'filiere': getattr(obj, 'filiere', ''),
            'niveau': getattr(obj, 'niveau', ''),
            'priorite': getattr(obj, 'priorite', ''),
            'etat': getattr(obj, 'etat', ''),
            'progression': getattr(obj, 'progression', 0),
            'date_creation': getattr(obj, 'date_creation', '').isoformat() if hasattr(obj, 'date_creation') and obj.date_creation else '',
            'date_debut': getattr(obj, 'date_debut', '').isoformat() if hasattr(obj, 'date_debut') and obj.date_debut else '',
            'date_echeance': getattr(obj, 'date_echeance', '').isoformat() if hasattr(obj, 'date_echeance') and obj.date_echeance else '',
            'derniere_mise_a_jour': getattr(obj, 'derniere_mise_a_jour', '').isoformat() if hasattr(obj, 'derniere_mise_a_jour') and obj.derniere_mise_a_jour else '',
            'nb_sessions': getattr(obj, 'nb_sessions', 0),
            'temps_total': getattr(obj, 'temps_total', 0),
            'taches': getattr(obj, 'taches', []),
            'ressources': getattr(obj, 'ressources', []),
            'tags': getattr(obj, 'tags', []),
            'suggestion_ia': getattr(obj, 'suggestion_ia', ''),
            'score_priorite_ia': getattr(obj, 'score_priorite_ia', 0),
            'objectif_recommande': getattr(obj, 'objectif_recommande', False)
        }

        return JsonResponse(data)

    except Objective.DoesNotExist:
        return JsonResponse({'error': 'Objectif non trouv√©'}, status=404)









@login_required
def chatbot_view(request):
    """Vue principale du chatbot"""
    try:
        # R√©cup√©rer le vrai user MongoDB
        mongo_user = _get_mongo_user(request.user)

        # CORRECTION : Utiliser user__id pour le filtrage
        objectifs = Objective.objects.filter(user__id=mongo_user.id)

        return render(request, "objectif/chatbot.html", {"objectifs": objectifs})

    except Exception as e:
        print(f"Erreur dans chatbot_view: {e}")
        # En cas d'erreur, retourner une liste vide
        return render(request, "objectif/chat.html", {"objectifs": []})





@login_required
def chatbot_api(request):
    """API pour le chatbot"""
    if request.method == "POST":
        try:
            user_message = request.POST.get("message", "").strip()

            if not user_message:
                return JsonResponse({"error": "Message vide"}, status=400)

            # R√©cup√©rer le vrai user MongoDB
            mongo_user = _get_mongo_user(request.user)

            # CORRECTION : R√©cup√©rer tous les objectifs et filtrer manuellement
            all_objectifs = Objective.objects.all()
            user_objectifs = []

            for obj in all_objectifs:
                try:
                    # V√©rifier si l'objectif appartient √† l'utilisateur
                    if hasattr(obj, 'user') and obj.user and str(obj.user.id) == str(mongo_user.id):
                        user_objectifs.append(obj)
                except Exception as e:
                    print(f"Erreur avec l'objectif {obj.id}: {e}")
                    continue

            # Construire le contexte
            context = "\n".join([
                f"- {obj.titre} (√âtat: {obj.etat}, Priorit√©: {obj.priorite}, Progression: {getattr(obj, 'progression', 0)}%)"
                for obj in user_objectifs
            ]) or "Aucun objectif enregistr√©."

            # Prompt am√©lior√© pour Gemini
            prompt = f"""
Tu es EduBot, un assistant √©ducatif intelligent et motivant qui aide les √©tudiants √† progresser dans leurs objectifs acad√©miques.

CONTEXTE DES OBJECTIFS DE L'UTILISATEUR :
{context}

QUESTION DE L'UTILISATEUR :
{user_message}

GUIDELINES POUR TA R√âPONSE :
- Sois encourageant, positif et constructif
- Propose des conseils pratiques et r√©alisables
- Si tu parles d'un objectif sp√©cifique, r√©f√©rence-le clairement
- Garde tes r√©ponses concises mais utiles (max 3-4 phrases)
- Adapte ton ton √† la situation : motivant pour les d√©fis, f√©licitations pour les progr√®s
- Si la question n'est pas li√©e aux objectifs, redirige gentiment vers le sujet

R√âPONSE :
"""

            # Appel √† Gemini
            model = genai.GenerativeModel("gemini-2.5-flash")
            response = model.generate_content(prompt)

            return JsonResponse({
                "reply": response.text,
                "status": "success",
                "objectifs_count": len(user_objectifs)
            })

        except Exception as e:
            print(f"Erreur dans chatbot_api: {e}")
            return JsonResponse({
                "error": f"Erreur du chatbot: {str(e)}",
                "status": "error"
            }, status=500)

    return JsonResponse({"error": "M√©thode non autoris√©e"}, status=405)
@login_required
def trigger_ia_analysis(request, obj_id):
    """D√©clenche une analyse IA compl√®te pour un objectif"""
    try:
        # Utiliser get_object_or_404 pour une meilleure gestion
        obj = get_object_or_404(Objective, id=obj_id, user_id=str(request.user.id))

        # G√©n√©rer l'analyse IA
        success = generate_complete_ia_analysis(obj)

        if success:
            # Utiliser la session comme fallback si messages pose probl√®me
            try:
                messages.success(request, "‚úÖ Analyse IA g√©n√©r√©e avec succ√®s!")
            except:
                request.session['analysis_message'] = "success:‚úÖ Analyse IA g√©n√©r√©e avec succ√®s!"
        else:
            try:
                messages.error(request, "‚ùå Erreur lors de la g√©n√©ration de l'analyse IA")
            except:
                request.session['analysis_message'] = "error:‚ùå Erreur lors de la g√©n√©ration de l'analyse IA"

        return redirect('objectif:details', obj_id=obj_id)

    except Exception as e:
        print(f"Erreur dans trigger_ia_analysis: {e}")
        try:
            messages.error(request, f"‚ùå Erreur lors de l'analyse IA: {str(e)}")
        except:
            request.session['analysis_message'] = f"error:‚ùå Erreur lors de l'analyse IA: {str(e)}"
        return redirect('objectif:details', obj_id=obj_id)

@login_required
def get_ia_analysis(request, obj_id):
    """API pour r√©cup√©rer l'analyse IA d'un objectif"""
    try:
        obj = get_object_or_404(Objective, id=obj_id, user_id=str(request.user.id))

        analysis_data = {
            'analyse_ia': getattr(obj, 'analyse_ia', ''),
            'points_forts': getattr(obj, 'points_forts', []),
            'points_amelioration': getattr(obj, 'points_amelioration', []),
            'risques': getattr(obj, 'risques', []),
            'recommendations': getattr(obj, 'recommendations', []),
            'delai_realisme': getattr(obj, 'delai_realisme', ''),
            'niveau_difficulte': getattr(obj, 'niveau_difficulte', 'moyen'),
            'suggestion_ia': getattr(obj, 'suggestion_ia', ''),
            'score_priorite_ia': getattr(obj, 'score_priorite_ia', 0),
            'objectif_recommande': getattr(obj, 'objectif_recommande', False)
        }

        return JsonResponse(analysis_data)

    except Exception as e:
        return JsonResponse({'error': 'Erreur lors de la r√©cup√©ration des donn√©es'}, status=500)

def generate_complete_ia_analysis(obj):
    """G√©n√®re une analyse IA compl√®te et d√©taill√©e avec Gemini 2.5 Flash"""

    api_key = os.getenv("AIzaSyBCutcN7kxoQ8frc9GHPGXlBMneulZCHzc")
    if not api_key:
        print("‚ùå Cl√© API Gemini non trouv√©e")
        return False

    try:
        # Pr√©parer les donn√©es pour l'analyse
        jours_restants = ""
        if obj.date_echeance:
            aujourd_hui = timezone.now().date()
            try:
                # G√©rer diff√©rents types de dates
                if hasattr(obj.date_echeance, 'date'):
                    date_echeance = obj.date_echeance.date()
                else:
                    date_echeance = obj.date_echeance

                # V√©rifier que les deux sont des date objects
                if isinstance(date_echeance, datetime.date) and isinstance(aujourd_hui, datetime.date):
                    jours_restants = (date_echeance - aujourd_hui).days
                else:
                    jours_restants = "Date non valide"
            except (TypeError, AttributeError) as e:
                print(f"Erreur calcul jours restants: {e}")
                jours_restants = "Erreur calcul"

        prompt = f"""
        Tu es un expert en analyse d'objectifs acad√©miques et professionnels.

        OBJECTIF √Ä ANALYSER :
        - Titre : {getattr(obj, 'titre', 'Non sp√©cifi√©')}
        - Description : {getattr(obj, 'description', 'Non sp√©cifi√©e')}
        - Fili√®re : {getattr(obj, 'filiere', 'Non sp√©cifi√©e')}
        - Niveau : {getattr(obj, 'niveau', 'Non sp√©cifi√©')}
        - Priorit√© : {getattr(obj, 'priorite', 'Non sp√©cifi√©e')}
        - √âtat : {getattr(obj, 'etat', 'Non sp√©cifi√©')}
        - Progression : {getattr(obj, 'progression', 0)}%
        - Tags : {', '.join(getattr(obj, 'tags', []))}
        - T√¢ches pr√©vues : {', '.join(getattr(obj, 'taches', []))}
        - Ressources : {', '.join(getattr(obj, 'ressources', []))}
        - Jours restants : {jours_restants if jours_restants else 'Non d√©fini'}

        EFFECTUE UNE ANALYSE COMPL√àTE ET R√âPONDS STRICTEMENT EN JSON :

        {{
            "analyse_ia": "Analyse textuelle compl√®te de 3-4 phrases",
            "points_forts": ["point fort 1", "point fort 2", "point fort 3"],
            "points_amelioration": ["point am√©lioration 1", "point am√©lioration 2"],
            "risques": ["risque 1", "risque 2"],
            "recommendations": ["recommandation 1", "recommandation 2", "recommandation 3"],
            "delai_realisme": "Tr√®s r√©aliste|R√©aliste|Peu r√©aliste|Irrealiste",
            "niveau_difficulte": "facile|moyen|difficile|expert",
            "suggestion_ia": "Suggestion concise pour l'utilisateur",
            "score_priorite_ia": 0.85,
            "objectif_recommande": true
        }}

        Sois honn√™te, constructif et pr√©cis dans ton analyse.
        R√©ponds UNIQUEMENT avec le JSON, sans texte suppl√©mentaire.
        """

        # Utilisation du mod√®le Gemini 2.5 Flash
        endpoint = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent"

        headers = {
            "Content-Type": "application/json",
        }

        data = {
            "contents": [{
                "parts": [{"text": prompt}]
            }],
            "generationConfig": {
                "temperature": 0.3,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 1024,
            }
        }

        print("üîÑ Appel √† l'API Gemini 2.5 Flash...")

        # Deux m√©thodes d'appel possibles
        try:
            # M√©thode 1 : avec le param√®tre key dans l'URL
            resp = requests.post(f"{endpoint}?key={api_key}", json=data, headers=headers, timeout=30)
        except:
            # M√©thode 2 : avec le header Authorization
            headers["Authorization"] = f"Bearer {api_key}"
            resp = requests.post(endpoint, json=data, headers=headers, timeout=30)

        if resp.status_code == 200:
            resp_json = resp.json()
            print("‚úÖ R√©ponse re√ßue de l'API Gemini")

            # Extraction du texte de r√©ponse (structure Gemini 2.5)
            text = ""
            try:
                if 'candidates' in resp_json and resp_json['candidates']:
                    candidate = resp_json['candidates'][0]
                    if 'content' in candidate and 'parts' in candidate['content']:
                        text = candidate['content']['parts'][0].get('text', '').strip()

                # Alternative pour diff√©rentes structures de r√©ponse
                if not text and 'candidates' in resp_json and resp_json['candidates']:
                    text = resp_json['candidates'][0].get('content', {}).get('parts', [{}])[0].get('text', '').strip()

            except Exception as extract_error:
                print(f"‚ùå Erreur extraction texte: {extract_error}")
                # Tentative d'extraction alternative
                text = str(resp_json).split('"text": "')[-1].split('"')[0] if '"text": "' in str(resp_json) else ""

            if not text:
                print("‚ùå R√©ponse vide de l'API Gemini")
                print(f"R√©ponse compl√®te: {resp_json}")
                return False

            # Nettoyer la r√©ponse
            text = text.strip()
            if text.startswith("```json"):
                text = text[7:]
            if text.endswith("```"):
                text = text[:-3]
            text = text.strip()

            print(f"üìù Texte re√ßu ({len(text)} caract√®res): {text[:200]}...")

            # Parsing JSON
            try:
                result = json.loads(text)
            except json.JSONDecodeError as e:
                print(f"‚ùå Erreur parsing JSON: {e}")
                print(f"Texte probl√©matique: {text}")

                # Fallback: cr√©er une analyse basique
                result = {
                    "analyse_ia": f"Analyse de l'objectif '{getattr(obj, 'titre', '')}'. Progression actuelle: {getattr(obj, 'progression', 0)}%. Priorit√©: {getattr(obj, 'priorite', 'Non d√©finie')}.",
                    "points_forts": [
                        "Objectif bien d√©fini et structur√©",
                        f"Progression de {getattr(obj, 'progression', 0)}% d√©j√† accomplie",
                        "Ressources et t√¢ches identifi√©es"
                    ],
                    "points_amelioration": [
                        "Am√©liorer la planification des d√©lais si n√©cessaire",
                        "Diversifier les m√©thodes d'apprentissage"
                    ],
                    "risques": [
                        "Risque de retard si non suivi r√©guli√®rement",
                        "D√©pendance aux ressources identifi√©es"
                    ],
                    "recommendations": [
                        "Planifier des sessions r√©guli√®res de travail",
                        "Suivre la progression hebdomadaire",
                        "Adapter les m√©thodes en fonction des r√©sultats"
                    ],
                    "delai_realisme": "R√©aliste",
                    "niveau_difficulte": "moyen",
                    "suggestion_ia": f"Pour l'objectif '{getattr(obj, 'titre', '')}', continuez vos efforts actuels et r√©visez r√©guli√®rement votre planning pour maintenir la progression.",
                    "score_priorite_ia": 0.7,
                    "objectif_recommande": True
                }

            # Mettre √† jour tous les champs avec des valeurs par d√©faut
            obj.analyse_ia = result.get("analyse_ia", "Analyse g√©n√©r√©e par l'IA")
            obj.points_forts = result.get("points_forts", [])
            obj.points_amelioration = result.get("points_amelioration", [])
            obj.risques = result.get("risques", [])
            obj.recommendations = result.get("recommendations", [])
            obj.delai_realisme = result.get("delai_realisme", "Non √©valu√©")
            obj.niveau_difficulte = result.get("niveau_difficulte", "moyen")
            obj.suggestion_ia = result.get("suggestion_ia", "Suggestion non disponible")
            obj.score_priorite_ia = float(result.get("score_priorite_ia", 0.5))
            obj.objectif_recommande = bool(result.get("objectif_recommande", False))

            obj.derniere_mise_a_jour = datetime.utcnow()
            obj.save()

            print("‚úÖ Analyse IA sauvegard√©e avec succ√®s")
            return True

        else:
            print(f"‚ùå Erreur API Gemini: {resp.status_code}")
            print(f"R√©ponse erreur: {resp.text}")
            return False

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse IA: {e}")
        import traceback
        traceback.print_exc()
        return False


@login_required
def generate_pdf_bilan(request, obj_id):
    """G√©n√®re un bilan PDF complet de l'objectif"""
    try:
        obj = Objective.objects.get(id=obj_id, user_id=str(request.user.id))

        # Cr√©er le buffer PDF
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=50, bottomMargin=50)
        styles = getSampleStyleSheet()

        # Styles personnalis√©s
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # Centr√©
            textColor=colors.HexColor('#2c3e50')
        )

        section_style = ParagraphStyle(
            'SectionTitle',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20,
            textColor=colors.HexColor('#3498db')
        )

        story = []

        # En-t√™te avec titre
        story.append(Paragraph(f"BILAN COMPLET - {obj.titre}", title_style))
        story.append(Spacer(1, 10))

        # Date de g√©n√©ration
        date_style = ParagraphStyle(
            'DateStyle',
            parent=styles['Normal'],
            fontSize=10,
            alignment=1,
            textColor=colors.gray
        )
        story.append(Paragraph(f"G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}", date_style))
        story.append(Spacer(1, 20))

        # Section 1: Informations g√©n√©rales
        story.append(Paragraph("üìä INFORMATIONS G√âN√âRALES", section_style))

        info_data = [
            ['Titre', obj.titre],
            ['Description', obj.description or 'Non sp√©cifi√©e'],
            ['Fili√®re', getattr(obj, 'filiere', 'Non sp√©cifi√©e')],
            ['Niveau', getattr(obj, 'niveau', 'Non sp√©cifi√©')],
            ['Priorit√©', getattr(obj, 'priorite', 'Non sp√©cifi√©e')],
            ['√âtat', getattr(obj, 'etat', 'Non sp√©cifi√©')],
            ['Progression', f"{getattr(obj, 'progression', 0)}%"],
            ['Sessions r√©alis√©es', str(getattr(obj, 'nb_sessions', 0))],
            ['Temps total', f"{getattr(obj, 'temps_total', 0)} heures"],
            ['Date cr√©ation', obj.date_creation.strftime("%d/%m/%Y %H:%M") if obj.date_creation else 'Non sp√©cifi√©e'],
            ['Date d√©but', obj.date_debut.strftime("%d/%m/%Y %H:%M") if obj.date_debut else 'Non sp√©cifi√©e'],
            ['Date √©ch√©ance', obj.date_echeance.strftime("%d/%m/%Y %H:%M") if obj.date_echeance else 'Non sp√©cifi√©e'],
            ['Derni√®re mise √† jour', obj.derniere_mise_a_jour.strftime("%d/%m/%Y %H:%M") if obj.derniere_mise_a_jour else 'Non sp√©cifi√©e']
        ]

        info_table = Table(info_data, colWidths=[150, 350])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f8f9fa')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#dee2e6')),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('PADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(info_table)
        story.append(Spacer(1, 25))

        # Section 2: Barre de progression visuelle
        story.append(Paragraph("üìà PROGRESSION", section_style))

        # Cr√©er un diagramme de progression simple
        progression = getattr(obj, 'progression', 0)
        progression_data = [
            ['Progression actuelle', f"{progression}%"]
        ]

        progression_table = Table(progression_data, colWidths=[200, 300])
        progression_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e9ecef')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#dee2e6')),
            ('PADDING', (0, 0), (-1, -1), 8),
        ]))
        story.append(progression_table)
        story.append(Spacer(1, 15))

        # Section 3: Analyse IA si disponible
        if hasattr(obj, 'analyse_ia') and obj.analyse_ia:
            story.append(Paragraph("ü§ñ ANALYSE INTELLIGENCE ARTIFICIELLE", section_style))

            # Score de viabilit√©
            score = getattr(obj, 'score_viabilite', 0)
            score_data = [
                ['Score de viabilit√©', f"{score*100:.1f}%"],
                ['Difficult√© estim√©e', getattr(obj, 'estimation_difficulte', 'Non √©valu√©').title()],
                ['D√©lai r√©aliste', getattr(obj, 'delai_realiste', 'Non √©valu√©').replace('_', ' ').title()],
                ['Priorit√© recommand√©e', getattr(obj, 'priorite_recommandee', 'Non √©valu√©').title()]
            ]

            score_table = Table(score_data, colWidths=[150, 350])
            score_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#17a2b8')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#e8f4fd')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#b3e0ff')),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('PADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(score_table)
            story.append(Spacer(1, 15))

            # Analyse globale
            story.append(Paragraph("<b>Analyse globale:</b>", styles['Heading3']))
            story.append(Paragraph(obj.analyse_ia, styles['Normal']))
            story.append(Spacer(1, 12))

            # Recommandations strat√©giques
            if hasattr(obj, 'recommandations_strategiques') and obj.recommandations_strategiques:
                story.append(Paragraph("<b>Recommandations strat√©giques:</b>", styles['Heading3']))
                for reco in obj.recommandations_strategiques:
                    story.append(Paragraph(f"‚Ä¢ {reco}", styles['Normal']))
                story.append(Spacer(1, 12))

            # Plan d'action
            if hasattr(obj, 'plan_action') and obj.plan_action:
                story.append(Paragraph("<b>Plan d'action d√©taill√©:</b>", styles['Heading3']))
                for i, action in enumerate(obj.plan_action, 1):
                    story.append(Paragraph(f"{i}. {action}", styles['Normal']))
                story.append(Spacer(1, 12))

            # Points cl√©s
            if hasattr(obj, 'points_cles') and obj.points_cles:
                story.append(Paragraph("<b>Points cl√©s √† surveiller:</b>", styles['Heading3']))
                for point in obj.points_cles:
                    story.append(Paragraph(f"‚ö° {point}", styles['Normal']))
                story.append(Spacer(1, 12))

            # Recommandation imm√©diate
            if hasattr(obj, 'recommandation_immediate') and obj.recommandation_immediate:
                story.append(Paragraph("<b>Action imm√©diate recommand√©e:</b>", styles['Heading3']))
                immediate_style = ParagraphStyle(
                    'ImmediateAction',
                    parent=styles['Normal'],
                    backColor=colors.HexColor('#fff3cd'),
                    borderPadding=10,
                    leftIndent=10,
                    textColor=colors.HexColor('#856404')
                )
                story.append(Paragraph(obj.recommandation_immediate, immediate_style))
                story.append(Spacer(1, 15))

        # Section 4: T√¢ches √† r√©aliser
        if hasattr(obj, 'taches') and obj.taches:
            story.append(Paragraph("‚úÖ T√ÇCHES √Ä R√âALISER", section_style))

            tasks_data = [['#', 'T√¢che']]
            for i, tache in enumerate(obj.taches, 1):
                tasks_data.append([str(i), tache])

            tasks_table = Table(tasks_data, colWidths=[30, 470])
            tasks_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28a745')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#d4edda')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#c3e6cb')),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('PADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(tasks_table)
            story.append(Spacer(1, 25))

        # Section 5: Ressources
        if hasattr(obj, 'ressources') and obj.ressources:
            story.append(Paragraph("üìö RESSOURCES DISPONIBLES", section_style))

            resources_data = [['#', 'Ressource']]
            for i, ressource in enumerate(obj.ressources, 1):
                resources_data.append([str(i), ressource])

            resources_table = Table(resources_data, colWidths=[30, 470])
            resources_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#6f42c1')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#e8e2ff')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d6cfff')),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('PADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(resources_table)
            story.append(Spacer(1, 25))

        # Section 6: Tags
        if hasattr(obj, 'tags') and obj.tags:
            story.append(Paragraph("üè∑Ô∏è TAGS ET CAT√âGORIES", section_style))

            tags_text = ", ".join([f"#{tag}" for tag in obj.tags])
            story.append(Paragraph(tags_text, styles['Normal']))
            story.append(Spacer(1, 25))

        # Pied de page
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=8,
            alignment=1,
            textColor=colors.gray,
            spaceBefore=20
        )
        story.append(Paragraph(f"Bilan g√©n√©r√© automatiquement - ID: {obj.id}", footer_style))

        # G√©n√©rer le PDF
        doc.build(story)
        buffer.seek(0)

        # Retourner le PDF
        response = HttpResponse(buffer, content_type='application/pdf')
        filename = f"bilan_{obj.titre.replace(' ', '_').lower()}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        return response

    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration PDF bilan: {e}")
        import traceback
        traceback.print_exc()
        return HttpResponse(f"Erreur lors de la g√©n√©ration du bilan PDF: {str(e)}", status=500)
